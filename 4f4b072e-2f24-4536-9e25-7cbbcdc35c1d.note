<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Quotations</title>
  <text xml:space="preserve"><note-content version="0.1">Quotations


    * [<link:internal>Poetry</link:internal>]
    * [<link:internal>Fiction</link:internal>]
    * [<link:internal>Dev quote</link:internal>]
    * [<link:internal>О женщинах</link:internal>]
    * [<link:internal>Dev Opinion</link:internal>]
    * [<link:internal>Story</link:internal>] 
    * [<link:internal>Humor</link:internal>] 
    * [<link:internal>Габриэль Гарсия Маркес</link:internal>]

Вы человек умный, Ваша речь говорит о том, что Ваш IQ выше стреднего. И Вам будет интересно узнать, что на юзабилити тестировании простые люди в поле login вводят, что бы Вы думали... своё имя русскими буквами!

4. Не стоит одновременно говорить и проводить демонстрацию
Пусть один человек говорит, а другой работает за компьютером. Если и первое, и второе будет делать один человек, то он неизбежно начнет мямлить, склонившись над экраном монитора, вместо того чтобы четко обращаться к аудитории. 
До тех пор пока вы находитесь перед аудиторией и смотрите на нее, вежливость (и привычка) заставляет ее уделять вам внимание. Но как только вы перестаете смотреть на людей, переключив внимание на что-то в вашем компьютере, они тут же отвлекаются на совершенно посторонние мысли, а этого не должно происходить до завершения вашей презентации. 

Ты знаешь, что
те, кто, кажутся, очень сильными в сердце, являются реально слабыми и самыми восприимчивыми?
Ты знаешь, что те, кто тратит свое время, защищая других, сами нуждается в ком — то, кто бы мог защитить их?
Ты знаешь, что труднее всего сказать три фразы:
«я люблю тебя», «прости» и «помоги мне»

чтобы быть независимым, достаточно решить, что тебе никто не нужен.

На дне каждого сердца есть осадок.

Ни один человек не может стать более чужим, чем тот, кого ты прежде любил. (Ремарк)

Я не отвечаю перед Богом за те сомнения, что зародились в душе моей, ибо эти сомнения следствие того разума, которым Он сам меня наделил..

ем глубже прячешь голову в песок, тем беззащитней становится твоя задница.

Если я молчу в ответ, это не значит, что мне нечего сказать
… Если я говорю о смерти, это не значит, что мне надоело жить
… Если я улыбаюсь, это не значит, что мне не больно
… Если я не плачу, это не значит, что я сильная
… Если я плачу, это не значит, что я слабая
… Если я заговорю, это не значит, что я перестану ненавидеть
… Если я падаю, это не значит, что я не умею ползти
… Если я напишу, это не значит, что я простила
… Если я вспомню, это не значит, что мне уже легко
… Если я ухожу, это не значит, что я не слышу слов в спину” 

Любовь это простынь бессониц рваных. (Маяковский)

Ты говоришь, что любишь ветер, но как только он начинает дуть поднимаешь воротник, ты говоришь что любишь дождь, но как только он начинает капть открываешь зонт, ты говоришь что любишь солнце, но как только оно начинает палить укрываешься в тень, вот теперь я и боюсь ведь ты говоришь что любишь” 

В этом мире никто не скажет, какой выбор был бы правильным. Что бы ты ни выбрал, какое бы решение ни принял, оно верно только потому, что принял его ты сам.

… скажу тебе честно: я тебя люблю -… Сердце колотится как сумасшедшее; в горле — ком, как бывает, когда высказываешь вслух самую сокровенную правду, и я вдруг чувствую себя, как идиот… — Мир застыл в тишине. Мир замер. — Ну, может быть не всегда… я знаю, считается только то, что ты делаешь. А говорить можно все, что угодно. Но и когда тебя не было рядом, ты всегда была со мной. Была и есть. Даже когда я забываю об этом. И не важно, что происходит на внешнем уровне: вместе мы или нет. Потому, что я тебя встретил, потому, что ты есть, потому, что ты всегда со мной — и никто, даже ты, у меня тебя не отнимет. Это неприкосновенно. Это останется навсегда. Насовсем. Я… я не знаю, как это сказать… Я живу. Я живой. И ты — со мной. Во мне… Я без понятия, что происходит, я не знаю, что это значит, я понимаю, что все, что я говорю, — полный бред, совершенно безсмысленный … я не знаю, чем все это закончится и к чему приведет, но я за это возьмусь. Потому, что другого мне просто не нужно.»…

Влюбленные смотрят друг на друга.
Друзья смотрят в одну сторону

Жизнь тяжела.. Жизнь жестока.. Жизнь зла.. Но мы ее любим.. И понимаем это лишь в моменты когда ненависть к ней проходит и солнца луч будит, щекоча ресницы..

ы — поток, прекрасный бурный поток, бьющийся о дамбы. Пока дамбы выдерживают его напор, он вскипает пеной и резво играет прибоем. Он любит эти дамбы, окружает их своей неистовой белопенной любовью. Но его любовь несет разрушение. Он манит, и ласкает, и бьет, и рвет мягкими руками, и дамба крошится, обломки один за другим падают ей в ладони. И тогда она, сметая все на своем пути устремляется прочь, дальше, дальше, гонимая жаждой биться прибоем и вскипать пеной — пока не найдет новую дамбу, которую захлестнет своей щедрой любовью и в конце концов тоже разрушит. Но о состоянии дамбы знает лишь ее смотритель, а не поток. Ведь когда поток поднимается к самой вершине, конец уже близок.”

M&gt;code inspection подразумевает что ответственность за код также берет на себя инспектирующй. Код ревью предполагает "рекомендации по улучшению кода".
Рекомендации без ответствнности бесполезны. Результато любой проверки, будь то инспекция или ревью должны быть некие артефакты. Рекомендация не артефакт. Фромальная инспекция коа подразумевает, что процесс длжен быть проведен формально, ледуя процессам и используя чеклисты, и возможно, без участия автора. Заполненный чеклист и является аретефактом. Peer review подразумевает именно живое общение, т.е. должны пристутствовать и автор и ревьюер(ы), и смотреть на код и вообщем-то не оговерено, что дальше делать. Это может быть проверка стандартов, соотвествие дизайна спецификациям, и многое другое. Ответственност в обоих случаях присутствует. В одном случае явно-бюрократичский — в виде документа, в другом случае, явно-небюрократичски — в виде человека. Хотя ничто не мешает совместить инспкцию с ревью. Все зависит от прцесса.

"Рекомендации по улучнению", как правило, забыватся на следующий день.
Если нету <link:internal>цели</link:internal> предпринять конкретные действия,
то никакого смысла устраивать ревью/инспекцию или еще что...

"Действием" может быть и осознанное решене ничего не менять,
потому что это требует слишком много ресурсов.

Я лично особой рзницы между ревью и инспекцией не вижу.
Смотреть код интерса ради смысла нет, а если уж что и смотреть, то с целью что-то в итоге предпринять.




Лучше иногда падать, чем никогда не летать.
Поднимаясь, улыбайтесь людям, потому что можете их встретить, когда будете идти вниз.
Не можешь изменить ситуацию, измени своё отношение к ней.
Храмы не помогут народу, потерявшему веру в себя. А. Гитлер.
Жизнь в любом случае добром не кончается...

"Сложнее всего в мире достигнуть простоты - это крайняя граница опыта и последнее усилие гения".
George Sand.

    [<link:internal>Цитаты</link:internal> о чае]

Если серьезно, то с возрастом все больше понимаешь, что слишком мало сделал для тех кого знал, любил, дружил... это не комплекс, и ни в коем случае нельзя так об этом думать, просто жизнь так скоротечна.

Этологи считают, что мат — это ментальный эквивалент потрясания гениталиями

    Вообще, у автора вызывает некоторую настороженность, когда о сложных вещах пытаются говорить упрощенно (это касается не только программирования). Задачи, решаемые современными программными системами, очень и очень сложны. Для их создания приходится использовать адекватные <link:internal>инструменты</link:internal>, которые не могут не соответствовать сложности и ответственности задач и потому объективно не могут быть простыми.
    
    
    Дело в том, что даже плохой стандарт лучше его отсутствия. Стандарт может быть устаревшим, неполным, содержать недостаточно обоснованные требования, но, тем не менее, крайне важно, чтобы все разработчики ему следовали. То обстоятельство, что вся программная продукция фирмы сделана по единым правилам, гораздо важнее в долгосрочном плане по сравнению с тем, что эти правила произвольны или несовременны. Общие правила (наряду с другими мерами) делают программу отчуждаемой от конкретного разработчика, давая возможность, скажем, сопровождать и развивать ее даже в случае отсутствия того, кто ее написал. 

Нужно держать в голове (никакой отладчик в этом не поможет) замысловатую логику изрядного фрагмента очень сложной программы, буквально в виде движущихся образов представлять себе, как срабатывает та или иная функция для данного фактического параметра, и постоянно помнить состояние и глубину стека вызовов для кода, который кто-то тебя (или коллегу) дернул сделать рекурсивным.

Способность определять реалистичные сроки больших программных проектов и умение их выдерживать - исключительно ценная составляющая опыта профессионального разработчика


“Профессионалы” в любой области подразделяются на тех, кто делится знаниями и тех, кто их приберегает. Скряги верят в ценность своей “Интеллектуальной собственности” (ИС). Творения их разума должны тщательно охраняться, дабы никто не смог украсть их драгоценные идеи. Но давайте взглянем правде в глаза, если нашим единственным “стратегическим преимуществом” являются наши идеи, то мы облажались.


I wanted to be free to make my own decisions, not become a "manager in the middle" who often had to <link:internal>pass</link:internal> on the decisions of those above him.


Architecture is what makes the sets of parts work together as a successful whole. Architecture documentation is what tells developers how to make it so.

Отчитываться перед кем-нибудь в использовании своего времени -- вредно. Ведь время - это то, что действительно твое. Тот кто-то может требовать от вас лишь конкретный результат. Но если ваша работа находится где-то на месте и принимать звонки клиентов, то пропущенные звонки -- тот негативный результат за который вы легко можете быть в ответе.

Как бы не повернулась судьба, единственная цель, которая вас достойна -- изменить мир. Все остальные <link:internal>цели</link:internal> - либо эгоистичны (тогда вы просто еще не разобрались в себе и ВАМ РАНО ДУМАТЬ О <link:internal>ЦЕЛИ</link:internal>), либо сводятся к "изменить мир".

банальных сюжетов не бывает - бывают банально снятые сюжеты

Самое лучшее, на что можно надеяться – что читатель запомнит одну единственную мысль из всей статьи и она станет частью читателя. Эта мысль вовсе необязательно должна относиться к теме статьи.

Самолюбие конечно тешится, как же без этого… Даже кот мой напрудив лужу в неположенном месте окидывает взором ее гармоничные очертания и аж весь раздувается от гордости.

Если программист признан незаменимым, то лучшее, что можно сделать --
избавиться от него как можно скорее. "The Psychology of Computer
Programming", Джеральд Вейнберг (VAN NOSTRAND REINOLD CO., 1971).

При этом прежде чем вводить какие угодно бонусы неплохо бы понимать чего вы хотите бонусам добиться. К сожалению даже в крупных конторах <link:internal>руководство</link:internal> часто этого не осознает и начинает творить х..ню.

Life is full of wonderful mysteries, but your code is not the place for them.



Есть один маленький факт, который понимает любой нормальный менеджер, и который почему-то проходит мимо большинства разработчиков. Он ломает вашу стройную картину.

Он состоит в том, что основу профессионализма инженера составляет знание нюансов и понимание проблематики предметной области. Именно из этого складывается "цена <link:internal>замены</link:internal> сотрудника" — время, которое он тратит на вникание в предметную область и текущие работы. Без глубокого понимания проблематики задач вы никогда не станете хорошим архитектором, и будете посредственным инженером, которого можно легко заменить другим без влияния на результат, не принимая во внимание, на каком языке вы пишете. 

На втором месте — только на втором! — стоит понимание нюансов применяемых технологий, знание их сильных и слабых сторон. Этому люди учатся сравнительно быстро — даже по первости это максимум год-два, и готово. При большом опыте период обучения сильно сокращается. Проблематика предметной области — здесь надо вкалывать не менее 3-4 лет, чтобы начало доходить, что к чему.

Ну а язык, язык... На язык вообще плевать. Основное требование к языку — он не должен отвлекать профессионала на возню со всякой ерундой, не имеющей отношения к сути решаемых проблем. Другими словами, он должен быть <link:internal>1</link:internal>) прост и лаконичен, 2) близок к предметной области, 3) не допускать дурацких ошибок 4) позволять давать "литературные" описания.  При этом, при приеме на работу в идеале должно быть неважно, знает кандидат наш язык или нет. Люди с большим опытом встречаются и так достаточно редко.

Для каждой области, язык, понятное дело, лучше подходит свой. Пишем оперсистему или драйвер — нам лучше всего подойдет С. Пишем бухгалтерию — <link:internal>1</link:internal>С рулит. <link:internal>Базы данных</link:internal> <link:internal>SQL</link:internal>. Простые клиенты — <link:internal>Java</link:internal>, <link:internal>Javascript</link:internal> или С# — вообще дофига вариантов. Сервер или бизнес-логика — <link:internal>Java</link:internal>. 

Использовать С++ для описания бизнес-логики? Зачем? Проблемы и так достаточно сложны, чтобы добавлять к ним ownership policy, пулы объектов, счетчики ссылок, крэши, утечки памяти, и прочий bullshit. 


Да-да-да. Главный навык разработчика — здравый смысл. К несчастью, встречается гораздо реже, чем всякие там "идеальная память", "аккуратность", "пунктуальность", "творческое воображение", "легкая обучаемость" и т.п.


А еще с возрастом приходит другая оценка происходящего. Оглядываясь назад удается вспомнить относительно немного ярких и запомнившихся моментов из работы. Ну были какие-то программы. Ну были какие-то напряги. Ну были баги, выявленные ночью во сне. Ну было пару моментов, когда удавалось что-то запустить и ты был очень рад этому (хотя уже и не помнишь чему именно). И все! Остальное -- это какая-то черная дыра, в которой было только <link:internal>программирование</link:internal>, еще раз <link:internal>программирование</link:internal> и ничего кроме программирования. А ведь хочется чего-нибудь вспомнить в старости. (Очень хорошо эту мысль выразили <link:internal>ДеМарко</link:internal> и Листер, но нет книги под рукой, чтобы привести точную цитату).


Смотря что считать документацией.
Часто приходится общаться с директорами, которые приглашали специалистов по реинжинирингу или просто бизнес-консультантов, которые полгода тусовались на предприятии, что-то выспрашивали и записывали, потом приносили пачку бумаги со схемами "as is" и "to be" - вот так вы живете, а вот так жить надо. После чего уходили. А бумага так бумагой и осталась. Через пару месяцев эта писанина становится абсолютно неактуальной - и "as is" поменялось, и "to be" уже так не хотим - бизнес не стоит на месте и не может работать по застывшим схемам.
То же самое можно сказать про документацию, которая называется "должностные инструкции". Разве может какая-нибудь должностная инструкция описать, что должен делать бренд-менеджер? Если только не описать это как "из кожи вон вылезти, чтобы увеличить продажи, расширить рынок сбыта...." остается добавить "познать самое себя, отделить зерна от плевел...". Он должен делать ВСЕ ЧТО ТРЕБУЕТ БИЗНЕС. И точка.

“First they ignore you, then they laugh at you, then they fight you, then you win.”

[SOA Quotation]

Новые научные идеи побеждают не потому, что их противники признают свою неправоту, просто противники эти постепенно вымирают, а подрастающее поколение, не обремененное предрассудками, усваивает новые идеи сразу. (Макс Планк)

Мы уйдём без следа — ни имён, ни примет
Этот мир простоит ещё тысячи лет
Нас и раньше тут не было — после не будет
Ни ущерба, ни пользы от этого нет.

Омар Хайям.





</note-content></text>
  <last-change-date>2010-04-28T14:11:14.4230730+04:00</last-change-date>
  <last-metadata-change-date>2010-04-28T14:11:14.4230730+04:00</last-metadata-change-date>
  <create-date>2008-03-28T22:52:31.2105880+03:00</create-date>
  <cursor-position>12526</cursor-position>
  <width>481</width>
  <height>360</height>
  <x>0</x>
  <y>157</y>
  <open-on-startup>False</open-on-startup>
</note>