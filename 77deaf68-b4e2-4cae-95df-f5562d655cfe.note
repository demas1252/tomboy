<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Fortran</title>
  <text xml:space="preserve"><note-content version="0.1">Fortran


S&gt;Посоветуйте язык для вычислений (кроме Фортрана). Требования: компиляция в nativ-код под <link:internal>Windows</link:internal>, встроенные матрицы, сообщество пользователей, мат. библитеки. 

Fortran  

Нет, я серьезно. Если Вас Matlab не устраивает по быстродействию, или из-за того, что он не производит native code, то Фортран. Просто прочтите до конца, тогда может станет ясно, почему я (с недавних пор) придерживаюсь этого мнения.

Я сам заядлый <link:internal>C</link:internal>++-шник. Однако в силу различных обстоятельств столкнулся с проблемой аналогичного характера. Сообщество Фортранщиков весьма ограничено, однако оно состоит из весьма квалифицированных людей, с корнями всего этого братства, уходящими в 60-е прошлого века.

Выучить Фортран проще, чем Паскаль, кроме того, он также структуирован, как и Паскаль (это не плюс, но учить проще).

То, что сообщество ограничено, но весьма квалифицировано -- это плюс, т.к. если Вы видите готовый модуль чего-либо под Фортран, <link:internal>вероятность</link:internal> того, что это код высочайшего качества, намного выше, чем для <link:internal>C</link:internal>++, например. Под Фортран есть модули, которые в различных там лабораториях писались и пересматривались десятилетиями.

Встроенный тип матриц позволяет компиляторам действительно оптимизировать код. Например, Вы взяли библиотеку работы с матрицами под <link:internal>C</link:internal>++. Далее Вам требуется вычислить AB+<link:internal>C</link:internal>. Компилятор <link:internal>C</link:internal>++ произведет вызов соответствующей функции вычисления AB, а затем функции сложения матриц, в то время как Фортран сделает все за раз, одним циклом, т.к. подобные операции оптимизируются компилятором на уровне типов. Есть и более сложные примеры.

Резюме: для многих вычислительных операций, особенно с матрицами использование проверенных временем Фортрановских библиотек весьма разумно. Если все ж таки есть аллергия к устарелому фортрановскому стилю написания программ (и вправду, иногда просто негде развернуться), я бы посоветовал использование mix programming Фортран + ваш любимый язык программирования. Таким образом Вы повысите свою квалификацию программиста в Вашем языке (который наверняка более востребован на рынке, чем Фортран), и будете уверены при этом, что если Ваш код и не работает, то скорее всего причина не в библиотеках, которые Вы используете, т.к. они скорее всего отточены до нельзя.

Честно говоря меня все это сообщество около полутора лет пыталось убедить, что Фортран для вычислительной математики -- это хорошо. И убедило. Впрочем, убедился я сам, когда столкнулся с реальными выяислительными задачами. Попробуйте найти под <link:internal>C</link:internal>++ библиотеку, реализующую метод гомотопии для решения нелинейных или полиномиальных систем уравнений, которая будет хоть чуточку приюлижена к HOMPACK или POLSYS_PLP. Короче, программисту лучше в подобных ситуациях не заморачиваться реализацией того, что далеко не глупые люди разрабатывали десятилетиями, и я пошел по пути mix programming. Свобода реализации идей + вычислительная мощь Фортрана! Все летает, как никогда.

Теперь о ресурсах.

Из компиляторов есть два наиболее интересных (ну или популярных). Один -- это современный компилятор Фортран от Интел. Он встраивается в VS2005, например, и там хоть одним проектом весь код на <link:internal>C</link:internal>++ и на Фортран.
Есть чуть более старый, но очень удобный Compaq Visual Fortran, который сам поставляется с VS98. В этом Фортране есть много собственных Compaq'ских наворотов, а кроме того простая готовая библиотека по построению всевозможных графиков и библиотека для работы под <link:internal>Windows</link:internal>. Кроме того очень хорошая справочная система.
Из open source посмотрите Gnu Fortran или Open Watcom.
Я бы посоветовал, пожалуй, Intel Fortran, хотя сам использую Compaq Fortran (в основном, правда, для компиляции готового кода).

Самый полный сборник алгоритмов на netlib.org.

Кроме того, может оказаться полезным следующий форум со ссылками: <link:url>http://forum.ru-board.com/topic.cgi?forum=33&amp;topic=7860</link:url>

Кто до сих пор использует Фортран:
Nuclear physics (LANL Los Alamos Natl. Lab., CERN), energy, weapons, weather forecast, finite elements engineering, computational fluid dynamics, aircrafts (e.g., Boeing), spacecrafts (e.g., NASA, JPL Jet Propulsion Lab.), natural oil and gas exploration, earthquakes (geophysics) ну и многие другие...
(в то время как другие спорят, какой язык лучше, эти ребята оптимизируют и улучшают сделанное)
Даже Санта-Клаус: здесь  

Ну и напоследок, здесь изложены "подводные камни" использования Фортрана с <link:internal>C</link:internal>/<link:internal>C</link:internal>++.

И помните, использование Фортрана после <link:internal>C</link:internal>++ вызывает приблизительно такую же реакцию у людей, как переход с Word'сково Equation (  ) на TeX. Это трудно сделать, и многие делают это только потому, что "профессор приказал", но я не знаю ни одного человека, который пожалел бы потом, ибо всему свое место: формулам -- в TeX-е, а серьезной вычислительной математики -- в Фортране.</note-content></text>
  <last-change-date>2009-11-05T16:11:58.7989530+03:00</last-change-date>
  <last-metadata-change-date>2009-11-05T16:11:58.7989530+03:00</last-metadata-change-date>
  <create-date>2008-03-26T22:17:00.8935320+03:00</create-date>
  <cursor-position>3002</cursor-position>
  <width>508</width>
  <height>360</height>
  <x>300</x>
  <y>49</y>
  <open-on-startup>False</open-on-startup>
</note>