<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Версия записи в KR1</title>
  <text xml:space="preserve"><note-content version="0.1">Версия записи в KR1

_Сообщение от Torin_

Если присуствующие смогут пояснить - зачем в KR1 добавлено поле "версия записи", было бы чудесно. 
Дело в том, что Юкон сам по себе версионник. Такие штуки делают когда клиент оперирует с отключенным набором записей (без поддержки коннекта к базе)


_Сообщение от Vadik_

А клиенты и AOS с собственными кэшами, формами, открытыми с позавчера - они и есть в некотором роде отключенные наборы данных. Никаких дополнительных версий записи в БД, естественно, не создается (и слава богу). Просто таким образом решают (пытаются решить) проблему "потерянных изменений" (lost updates)
Некоторые мысли на эту тему уже излагал тут (<link:url>http://forum.mazzy.ru/index.php?showtopic=4868</link:url>)


Дело в следующем (с). Как уже писалось на axforum-е, сейчас в структуре данных добавлено новое поле - RECVERSION, инициализируется оно значением 1, далее при каждой модификации оно меняется (как генерируется - непонятно, да и не важно, допустим, случайным образом, главное, что две сессии сгенерят два разных значения). При изменении (UPDATE) записи 

РАНЬШЕ:
- запись перечитывалась по <link:internal>RecId</link:internal> (select * from myTable where DataAreaId = .. and <link:internal>RecId</link:internal> = ..
- изменения, которые могли быть сделаны другими сессиями, merge-ились с изменениями в текущей сессии

СЕЙЧАС:
- запись не перечитывается, сразу выполняется update myTable where DataAreaId = .. and <link:internal>RecId</link:internal> = .. and RECVERSION = .. 
если кто-то уже изменил эту запись, поле RECVERSION имеет уже другое значение и фактически мы "пролетаем" с оператором UPDATE - количество обработанных записей (@@ROWCOUNT) = 0. Поэтому система перечитает запись по <link:internal>RecId</link:internal> и продолжит работу как ни в чем ни бывало (по старому алгоритму)

Т.е. количество операций в среднем по системе таки должно уменьшаться и выигрыш вроде бы есть. Единственное НО: этот механизм работает только на формах (данные, которые отбираются для изменения из кода, уже заблокированы с select forupdate), а данные на формах (по моим ощущениям) вроде бы не особо интенсивно меняются. Стоило ли для это добавлять новое поле во все таблицы - ну, вендору виднее


Это не грязное чтение. Это обновление по оптимистическому алгоритму - мы ПРЕДПОЛАГАЕМ, что запись не успели обновить до нас. Если это не так (кто-то влез с UPDATE перед нами), нам придется проделать дополнительную работу при повторной попытке выполнить обновление, в этом случае операция в целом будет дороже с точки зрения IO, чем при пессимистическом алгоритме. Если конфликты при обновлении случаются относительно редко, выигрыш с точки зрения ввода-вывода есть
</note-content></text>
  <last-change-date>2009-10-12T12:00:40.3589560+04:00</last-change-date>
  <last-metadata-change-date>2009-10-12T12:00:40.3589560+04:00</last-metadata-change-date>
  <create-date>2008-03-26T22:18:40.9738820+03:00</create-date>
  <cursor-position>48</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>300</x>
  <y>49</y>
  <open-on-startup>False</open-on-startup>
</note>