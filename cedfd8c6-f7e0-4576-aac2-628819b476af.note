<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Полный пример работы с Mnesia</title>
  <text xml:space="preserve"><note-content version="0.1">Полный пример работы с Mnesia

%% ---
%%  Excerpted from "Programming <link:internal>Erlang</link:internal>",
%%  published by The Pragmatic Bookshelf.
%%  Copyrights <link:internal>apply</link:internal> to this code. It may not be <link:internal>used</link:internal> to create training material, 
%%  courses, books, articles, and the like. Contact us <link:internal>if</link:internal> you are in doubt.
%%  We make no guarantees that this code is fit for any purpose. 
%%  Visit <link:url>http://www.pragmaticprogrammer.com/titles/jaerlang</link:url> for more book information.
%%---
-module(<link:internal>test</link:internal>_<link:internal>mnesia</link:internal>).
-import(lists, [foreach/2]).
-compile(export_all).

%% IMPORTANT: The next line must be included
%%            <link:internal>if</link:internal> we want to call qlc:q(...)

-include_lib("stdlib/include/qlc.hrl").


-record(shop, {item, quantity, cost}).
-record(cost, {name, price}).


-record(design, {id, plan}).



do_this_once() -&gt;
    <link:internal>mnesia</link:internal>:create_schema([node()]),
    <link:internal>mnesia</link:internal>:start(),
    <link:internal>mnesia</link:internal>:create_table(shop,   [{attributes, record_info(fields, shop)}]),
    <link:internal>mnesia</link:internal>:create_table(cost,   [{attributes, record_info(fields, cost)}]),
    <link:internal>mnesia</link:internal>:create_table(design, [{attributes, record_info(fields, design)}]),
    <link:internal>mnesia</link:internal>:stop().


start() -&gt;
    <link:internal>mnesia</link:internal>:start(),
    <link:internal>mnesia</link:internal>:wait_for_<link:internal>tables</link:internal>([shop,cost,design], 20000).



%% <link:internal>SQL</link:internal> equivalent
%%  SELECT * FROM shop;

demo(select_shop) -&gt;
    do(qlc:q([X || X &lt;- <link:internal>mnesia</link:internal>:table(shop)]));




%% <link:internal>SQL</link:internal> equivalent
%%  SELECT item, quantity FROM shop;

demo(select_some) -&gt;
    do(qlc:q([{X#shop.item, X#shop.quantity} || X &lt;- <link:internal>mnesia</link:internal>:table(shop)]));

 


%% <link:internal>SQL</link:internal> equivalent
%%   SELECT shop.item FROM shop
%%   WHERE  shop.quantity &lt; 250;

demo(reorder) -&gt;
    do(qlc:q([X#shop.item || X &lt;- <link:internal>mnesia</link:internal>:table(shop),
			     X#shop.quantity &lt; 250
				]));


%% <link:internal>SQL</link:internal> equivalent
%%   SELECT shop.item, shop.quantity, cost.name, cost.price
%%   FROM shop, cost 
%%   WHERE shop.item = cost.name 
%%     AND cost.price &lt; 2
%%     AND shop.quantity &lt; 250

demo(join) -&gt;
    do(qlc:q([X#shop.item || X &lt;- <link:internal>mnesia</link:internal>:table(shop),
			     X#shop.quantity &lt; 250,
			     Y &lt;- <link:internal>mnesia</link:internal>:table(cost),
			     X#shop.item =:= Y#cost.name,
			     Y#cost.price &lt; 2
				])).



do(Q) -&gt;
    F = fun() -&gt; qlc:e(Q) end,
    {atomic, Val} = <link:internal>mnesia</link:internal>:transaction(F),
    Val.




example_<link:internal>tables</link:internal>() -&gt;
    [%% The shop table
     {shop, apple,   20,   2.3},
     {shop, orange,  100,  3.8},
     {shop, pear,    200,  3.6},
     {shop, banana,  420,  4.5},
     {shop, potato,  2456, 1.2},
     %% The cost table
     {cost, apple,   1.5},
     {cost, orange,  2.4},
     {cost, pear,    2.2},
     {cost, banana,  1.5},
     {cost, potato,  0.6}
    ].



<link:internal>add</link:internal>_shop_item(Name, Quantity, Cost) -&gt;
    Row = #shop{item=Name, quantity=Quantity, cost=Cost},
    F = fun() -&gt;
		<link:internal>mnesia</link:internal>:write(Row)
	end,
    <link:internal>mnesia</link:internal>:transaction(F).



remove_shop_item(Item) -&gt;
    Oid = {shop, Item},
    F = fun() -&gt;
		<link:internal>mnesia</link:internal>:delete(Oid)
	end,
    <link:internal>mnesia</link:internal>:transaction(F).




farmer(Nwant) -&gt;
    %% Nwant = Number of oranges the farmer wants to buy
    F = fun() -&gt;
		%% <link:internal>find</link:internal> the number of apples
		[Apple] = <link:internal>mnesia</link:internal>:read({shop,apple}),
		Napples = Apple#shop.quantity,
		Apple1  = Apple#shop{quantity = Napples + 2*Nwant},
		%% update the database
		<link:internal>mnesia</link:internal>:write(Apple1),
		%% <link:internal>find</link:internal> the number of oranges
		[Orange] = <link:internal>mnesia</link:internal>:read({shop,orange}),
		NOranges = Orange#shop.quantity,
		<link:internal>if</link:internal> 
		    NOranges &gt;= Nwant -&gt;
			N1 =  NOranges - Nwant,
			Orange1 = Orange#shop{quantity=N1},
			%% update the database
			<link:internal>mnesia</link:internal>:write(Orange1);
		    true -&gt;
			%% Oops -- not enough oranges
			<link:internal>mnesia</link:internal>:abort(oranges)
		end
	end,
    <link:internal>mnesia</link:internal>:transaction(F).




reset_<link:internal>tables</link:internal>() -&gt;
    <link:internal>mnesia</link:internal>:clear_table(shop),
    <link:internal>mnesia</link:internal>:clear_table(cost),
    F = fun() -&gt;
		foreach(fun <link:internal>mnesia</link:internal>:write/1, example_<link:internal>tables</link:internal>())
	end,
    <link:internal>mnesia</link:internal>:transaction(F).





<link:internal>add</link:internal>_<link:internal>plans</link:internal>() -&gt;
    D1 = #design{id   = {joe,1},
		 plan = {circle,10}},
    D2 = #design{id   = fred, 
		 plan = {rectangle,10,5}},
    D3 = #design{id   = {jane,{house,23}},
		 plan = {house,
			 [{floor,1,
			   [{doors,3},
			    {<link:internal>windows</link:internal>,12},
			    {rooms,5}]},
			  {floor,2,
			   [{doors,2},
			    {rooms,4},
			    {<link:internal>windows</link:internal>,15}]}]}},
    F = fun() -&gt; 
		<link:internal>mnesia</link:internal>:write(D1),
		<link:internal>mnesia</link:internal>:write(D2),
		<link:internal>mnesia</link:internal>:write(D3)
	end,
    <link:internal>mnesia</link:internal>:transaction(F).



get_plan(PlanId) -&gt;
    F = fun() -&gt; <link:internal>mnesia</link:internal>:read({design, PlanId}) end,
    <link:internal>mnesia</link:internal>:transaction(F).


</note-content></text>
  <last-change-date>2010-04-28T14:11:16.3256470+04:00</last-change-date>
  <last-metadata-change-date>2010-04-28T14:11:16.3256470+04:00</last-metadata-change-date>
  <create-date>2009-04-11T16:48:43.0636600+04:00</create-date>
  <cursor-position>2465</cursor-position>
  <width>906</width>
  <height>707</height>
  <x>93</x>
  <y>40</y>
  <open-on-startup>False</open-on-startup>
</note>