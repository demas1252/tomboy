<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Семафоры в Linux</title>
  <text xml:space="preserve"><note-content version="0.1">Семафоры в Linux

#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;pthread.h&gt;
#include &lt;semaphore.h&gt;

void     *thread_function(void *arg);
sem_t     bin_sem;
#define WORK_SIZE 1024
char     work_area[WORK_SIZE];

int main() {    
    int     res;
    pthread_t     a_thread;
    void     *thread_result;

    res = sem_init(&amp;bin_sem, 0, 0);
    <link:internal>if</link:internal> (res != 0) {
        perror("Semaphore initialization failed");
        exit(EXIT_FAILURE);
    }

    res = pthread_create(&amp;a_thread, NULL, thread_function, NULL);
    <link:internal>if</link:internal> (res != 0) {
        perror("Thread creation failed");
        exit(EXIT_FAILURE);
    }

    printf("Input <link:broken>some</link:broken> text. Enter 'end' to finish\n");
    while(strncmp("end", work_area, 3) != 0) {
        fgets(work_area, WORK_SIZE, stdin);
        sem_post(&amp;bin_sem);
    }

    printf("\nWaiting for thread to finish...\n");
    res = pthread_join(a_thread, &amp;thread_result);
    <link:internal>if</link:internal> (res != 0) {
        perror("Thread join failed");
        exit(EXIT_FAILURE);
    }
    printf("Thread joined\n");
    sem_destroy(&amp;bin_sem);
    exit(EXIT_SUCCESS);

}

void *thread_function(void *arg) {
    sem_wait(&amp;bin_sem);
    while(strncmp("end", work_area, 3) != 0) {
        printf("You input %d characters\n", strlen(work_area) -<link:internal>1</link:internal>);
        sem_wait(&amp;bin_sem);
    }
    pthread_exit(NULL);
}

demas@demas-desktop:~/sources$ cc -D_REETRANT -I/usr/include/ntp<link:internal>1</link:internal> semaphore.<link:broken>c</link:broken> -o semaphore -L/usr/lib/ntp<link:internal>1</link:internal> -lpthread

Здесь от момента создания потока до join работают одновременно два потока - основной, который запрашивает у пользователя строку и взводит семафор, и вспомогательный, который считает символы в строке и сбрасывает семафор.</note-content></text>
  <last-change-date>2010-04-28T14:11:14.2599370+04:00</last-change-date>
  <last-metadata-change-date>2010-04-28T14:11:14.2599370+04:00</last-metadata-change-date>
  <create-date>2008-03-27T15:44:00.5438070+03:00</create-date>
  <cursor-position>45</cursor-position>
  <width>0</width>
  <height>0</height>
  <x>-1</x>
  <y>-1</y>
  <open-on-startup>False</open-on-startup>
</note>