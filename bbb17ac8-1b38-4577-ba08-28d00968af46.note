<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Agile</title>
  <text xml:space="preserve"><note-content version="0.1">Agile


При agile нужен очень грамотный архитектор, который сможет заложить сразу-же в архитектуру много всего, что заказчик может потребовать. А иначе получается лоскутный код, который обойдется заказчику дороже (сразу, или после некоторого этапа сопровождения), чем разработка двух систем одна после другой. 


Внешнему заказчику, как правило, нужны сертификаты, формальные <link:internal>процессы</link:internal>, красивые диаграмы и другие радующие глаз вещи, которые очень удобно приложить к отчету и продемонстрировать, скажем, на очередном совете директоров.. Это обусловлено рядом внешних факторов, как-то:
- Заказчик не из IT, ему не интересна внутреняя кухня, для него софтверный проект ровно такой же как все остальные и он не видит причин работать с софтверным проектом по другому.
- У заказчика есть своя сертификация и по ее условиям все подрядчики должны быть сертифицированы соответствующим образом.
- Заказчик является публичной кампанией и ему необходимо предоставлять отчетность о том что там происходит, и чтобы не высасывать ее из пальца, он требует ее в соотвествующем формате от подрядчика.
И множество других....

Именно, по этой причине все крупные аутсорсеры активно осваивают формальные <link:internal>процессы</link:internal> и всячески под них сертифицируются, а ребята занимающиеся собственной разработкой в основно практикуют нечто вроде Agile в собственной интерпретации.




Прежде всего. Помню, когда я был помоложе, то временами наше племя устраивалось у костра, доедая останки убитого накануне мамонта, а старики расказывали всякие байки в надежде получить свой кусок мяса. И одной из этих баек был рассказ о том, что бывает такая порода заказчиков, которые соглашаются отдельно оплатить разработку спецификации на их же собственный заказ. Но в мое время эта порода уже не встречалась, говорят - вымерла. А они, оказывается, еще сохранились. Ареал обитания выдать не прошу, понимаю - коммерческая тайна.   ;)  

Поставьте себя на место заказчика. Пока вы этим занимаетесь, я, с вашего позволения, поставлю на это место себя. Итак - мне нужно разработать какую-нибудь хрень. Но так как сам я в этом ничего не понимаю, то заказ отдаю на сторону. Составляю список из 5-6 IT-шных конторы, обзваниваю/обхожу их и спрашиваю - можете ли вы сделать такую хрень, имеете ли вы опыт успешного создания такой хрени и сколько эта хрень мне будет стоить, если я решу ее делать у вас?

А умник с вашей стороны мне и отвечает - Вы знаете, мы раньше могли бы Вам это сказать, но теперь мы работаем по очень прогрессивной <link:internal>методологии</link:internal>, которая не позволяет заранее сказать, как долго продлится разработка и сколько она будет стоить. Так что давайте мы просто подпишем контракт, а Вы нам будете оплачивать затраченное время, сколько бы его не ушло.

Не знаю как вы отнесетесь к такому предложению, но лично я не только пошлю умников далеко и надолго, но и брошусь ко всем знакомым с рассказом о новом способе кидалова. Может даже в Газете опубликую статейку "Как программисты разводили меня на деньги". И не имеет никакого значения, прав я или нет. Важно только то, что именно так нормальные заказчики поступали, поступают и поступать будут.

Поэтому, вне зависимости от того, что там у вас под капотом, работа над проектом на заказ всегда начинается одинаково. А именно - с разработки документа, который разные организации именуют по-разному. Некторые называют его "Vision&amp;Scope", некоторые - ТЗ (ТЗ вообще очень забавный термин. Разные люди понимают под ним не просто разные, а прямо-таки противоположные вещи - и все уверены в своей правоте). Ну а мы его будем называть просто - Документ.

Документ этот содержит список важных требований к проекту и детализацию (средней степени) ключевых требований. Насколько этот документ должен быть подробным? ХЗ. Нижняя граница - в нем должны быть четко сформулированы все ключевые требования к проекту. Верхняя граница - вы делаете его бесплатно.  ;)  
Вот этот-то документ и подписывается сторонами. И именно на его основе вы и высчитываете время (и, как следствие, деньги), которое данный проект потребует. Как? На глазок, опираясь на предыдущий опыт создания подобных систем.

На первый взгляд такая система абсолютно неработоспособна. Ну например - в процессе дальнейшей работы требования уточняются и откуда ни возьмись появляются новые куски работы. Кто их будет оплачивать? Отвечаю - требования всегда уточняются и новые куски работы всегда появляются. И вы должны были это учесть в предварительной оценке. Где-то оценка окажется оптимистичной, где-то - пессимистичной. В среднем, если вы знаете свое дело, времени должно хватить. На самом-то деле в реальном бизнесе сумма контракта вообще далеко не всегда зависит от объема работы  :) , но это уже offtopic.

Бывает также, что в процессе работы выявляются новые требования, которых в Документе вообще нет. Т.е. заказчику (самому или с вашей помощью) приходит в голову новая гениальная идея. Кто будет ее оплачивать? Оплачивать ее должен заказчик и это должно быть прописано в соглашении. Но в этом вопросе следует проявлять гибкость. Если вам это не очень сложно - сделайте без пересмотра контракта. Но в следующий раз, когда возникнет конфикт по поводу того, как квалифицировать очередную фичу - как новую или уточнение старой, не забудьте напомнить заказчику о своей неземной доброте.  :) 

В такой схеме работы риски более-менее честно распределены между заказчиком и исполнителем и это ее достоинство. Недостаток - она работает только в более-менее благожелательной атмосфере, когда стороны сотрудничают. Если кто-то на ком-то пытается прокатиться нахаляву - картина получается очень грустная.  :xz: 

Ну а альтернатива - утки. Т.е. аутсорсинг. Схема работы, при которой все риски берет на себя заказчик. Но это уже совсем отдельная тема.</note-content></text>
  <last-change-date>2008-03-27T21:58:55.2943470+03:00</last-change-date>
  <last-metadata-change-date>2008-03-27T21:58:55.2943470+03:00</last-metadata-change-date>
  <create-date>2008-03-26T23:04:50.2265160+03:00</create-date>
  <cursor-position>34</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>4</x>
  <y>49</y>
  <open-on-startup>False</open-on-startup>
</note>