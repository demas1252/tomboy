<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>sicp 1.7</title>
  <text xml:space="preserve"><note-content version="0.1">sicp 1.7

(define (square x)
  (* x x))

(define (average x y)
  (/ (+ x y) 2))

(define (improve guess x)
  (average guess (/ x guess)))

(define (good-enough? guess x)
  (&lt; (<link:internal>abs</link:internal> (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
  (<link:internal>if</link:internal> (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x)
                     x)))
(define (my_sqrt x)
  (sqrt-iter <link:internal>1</link:internal>.0 x))

; =============== solution ===========================================

(define (better-good-enough? guess prev-guess)
  (&lt; (<link:internal>abs</link:internal> (/ (- guess prev-guess) prev-guess)) 0.001))

(define (better-sqrt-iter guess prev-guess x)
  (<link:internal>if</link:internal> (better-good-enough? guess prev-guess)
      guess
      (better-sqrt-iter (improve guess x)
                        guess
                        x)))

(define (better-sqrt x)
  (better-sqrt-iter <link:internal>1</link:internal>.0 0.5 x))

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Нам нужно было значение prev-guess для сравнения с текущим и мы его получили.  Для этого нам пришлось добавить один параметр в функцию, дабы протягивать его с предыдущего цикла.</note-content></text>
  <last-change-date>2009-10-25T08:50:29.1698380+03:00</last-change-date>
  <last-metadata-change-date>2009-10-25T08:50:29.1698380+03:00</last-metadata-change-date>
  <create-date>2008-04-03T16:12:30.2772350+04:00</create-date>
  <cursor-position>37</cursor-position>
  <width>743</width>
  <height>786</height>
  <x>688</x>
  <y>204</y>
  <open-on-startup>False</open-on-startup>
</note>