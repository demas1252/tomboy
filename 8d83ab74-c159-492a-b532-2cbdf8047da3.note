<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>сonst от Алены</title>
  <text xml:space="preserve"><note-content version="0.1">сonst от Алены


Есть две точки зрения на <link:internal>использование const</link:internal>. Первая: const - это плохо. От него больше хлопот, чем пользы, ошибки какие-то странные вылезать начинают, лучше им не пользоваться.
Вторая: const - это хорошо. const не дает менять объекты, которые не должны меняться, таким образом оберегает от ошибок, его надо использовать везде где только можно.  Я придерживаюсь второй точки зрения.

*Объявление переменных*

Самый простой случай, обычная переменная. Переменная объявляется, тут же инициализируется, менять ее значение больше нельзя.

&lt;&lt;pre
const int p=4;
p=5; //ошибка

&gt;&gt;
Про <link:internal>использование const</link:internal> с указателями есть известный <link:internal>C</link:internal>++ паззл, который любят давать на собеседованиях при приеме на работу.
Чем отличаются
&lt;&lt;pre
int *const p1
int const* p2
const int* p3

&gt;&gt;
Правило тут такое: провести мысленно вертикальную черту по звездочке. То, что находится справа относится к переменной. То, что слева - к типу, на который она указывает. Вот например:
&lt;&lt;pre
int *const p1

&gt;&gt;
Cправа находится p1, и это p1 константа. Тип, на который p1 указывает, это int. Значит получился константный указатель на int. Его можно инициализировать лишь однажды и больше менять нельзя.
Нужно так:
&lt;&lt;pre
int q=1;
int *const p1 = &amp;q; //инициализация в момент объявления
*p1 = 5; //само число можно менять

&gt;&gt;
Вот так компилятор не пропустит, потому что идет попытка присвоения константе:

&lt;&lt;pre
int q=1;
int *const p1;
p1 = &amp;q; //ошибка

&gt;&gt;
Объявления
&lt;&lt;pre
int const* p2
const int* p3

&gt;&gt;

это по разному записанное одно и то же объявление. Указатель на целое, которое нельзя менять.
&lt;&lt;pre
int q=1;
const int *p;
p = &amp;q; //на что указывает p можно менять
*p = 5; //ошибка, число менять уже нельзя

&gt;&gt;
Обычно в реальных программах используется вариант объявления const int, а int const используется, чтобы запутать на собеседовании.

const можно использовать со ссылками, чтобы через ссылку нельзя было поменять значение переменной.

&lt;&lt;pre
int p = 4;
const int&amp; x=p; //нельзя через x поменять значение p
x=5; //ошибка

&gt;&gt;
Константная ссылка - это нонсенс. Она по определению константная. Компилятор скорее всего выдаст предупреждение, что он проигнорировал const.

&lt;&lt;pre
int&amp; const x; //не имеет смысла

&gt;&gt;

*Передача параметров в функцию*

const удобен, если нужно передать параметры в функцию, но при этом надо обязательно знать, что переданный параметр не будет изменен.

&lt;&lt;pre
void f1(const std::string&amp; s);
void f2(const std::string* sptr);
void f3(std::string s);

&gt;&gt;

В первой и второй функции попытки изменить строку будут пойманы на этапе компиляции. В третьем случае в функции будет происходить работа с локальной копией строки, исходная строка не пострадает.</note-content></text>
  <last-change-date>2008-07-05T09:33:55.1969190+04:00</last-change-date>
  <last-metadata-change-date>2008-07-05T09:33:55.1969190+04:00</last-metadata-change-date>
  <create-date>2008-03-26T23:15:05.3180800+03:00</create-date>
  <cursor-position>43</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>248</x>
  <y>640</y>
  <open-on-startup>False</open-on-startup>
</note>