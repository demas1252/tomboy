<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Управление ошибками</title>
  <text xml:space="preserve"><note-content version="0.1">Управление ошибками


Для организации подобного процесса следует также соблюдать следующие условия:

Каждый отчет об ошибке должен содержать необходимый набор свойств. Это поможет всем членам команды ориентироваться в списке ошибок. Как мне кажется, следующего набора свойств достаточно для начала организации процесса: 
Приоритет – Низкий, Средний, Высокий, Критический. 
Тип ошибки – Exception, Дизайн, Неверная функциональность и т.п. 
Компонент продукта – сайт, база данных и т.п. 
Версия компонента. 
Чтобы разработчикам не требовалось тратить время на повторение ошибок, тестировщикам необходимо описывать ошибки как можно более подробно. Желательно, каждую ошибку должны сопровождать: 
Снимок экрана (если возможно). 
Информации о пользователе (например, логин для сайта), сообщившем об ошибке. 
URL, если речь идет о сайте. 
Стек, если речь идет об ошибке времени выполнения. 
Последовательность действий, приводящая к ошибке. 
Файлы отчетов об ошибках, письма пользователей, тексты ошибок и т.д. 

---

Все очень сильно зависит от проекта и всего что с ним связано.
По хорошему это надо планировать.
Т.е. в планах проекта должны быть явно прописаны критерии качества,
при достижении которых продукт может быть выпущен.
Кстати, эти критерии могут затрагивать не только баги,
но документацию, процесс и многое другое.

Что касается именно багов, то практика тут бывает разной.
На каких-то проектах решается что все известные баги должны быть поправлены.
Для некоторых систем это имеет смысл (типа пресловутых систем управления АЭС).
Для менее критичных систем можно позволить себе и не править все баги.
У нас, к примеру, все баги разделены на 5 категорий серьезности:

1-я категория — критичные баги,...

5-я — некритичные баги, не отражающиеся на функциональности и незаметные для юзера.
Стандартно продукт у нас может быть выпущен если поправлены все известные баги категорий 1 и 2.
Иногда нужно ужесточить критерии и выпускать продукт можно только если
нету багов категорий 1-3 и общее число известных непоправленных багов не более 100 (число дано с потолка).
На самом деле конкретные критерии не так важны.
Важно чтобы они были в явном виде. Очень важно чтобы их можно было легко проверить,
и чтобы этими критериями действительно пользовались.

---

Как правило, как уже говорилось выше, баги делят на несколько категорий, традиционно 6:
blocker — блокирует некоторую важную функцональность (пример: нельзя сохранить документ в офисном приложении);
critical — блокирует некоторую важную функцональность, но есть workaround — обходной путь, позволяющий баг нейтрализовать без внесения изменения в код (исправить данные в базе или ещё что-то) и продолжить работу (пример: после установки приложения нельзя открыть соединение с его базой данных, но если руками поправить конфигурацию, то всё ок);
major — неправильное поведение, которое портит впечатление о продукте (пример: программа допускает выполнение некорректных операций и падает при их выполнении, вместо того, чтобы их заблокировать или выдать корректное сообщение об ошибке);
normal — баг, требующий небольших исправлений или улучшений, не затрагивающих существующую функциональность (пример: добавить возможность множественного <link:internal>выделения</link:internal> при операциях удаления);
minor — косметические изменения (исправить цвет кнопки с синей на зелёную);
trivial — никто и никогда не заметит, но лучше поправить (выкинуть кусок старого закомментированного кода).

Обычно в крупных проектах принимается следующая стратегия:
1) если баг blocker и он блокирует дальнейшую разработку или тестирование, то он должен быть либо исправлен, либо переведён в разряд critical публикацией workaround`а;
2) если blocker, critical или major баг обнаружен в выпущенной версии (версия ушедшая заказчикам), они исправляются немедленно и выпускается заплатка (патч, хотфикс — как угодно называйте); при этом blocker баг до выпуска патча должен быть по возможности переведён в разряд critical публикацией workaround`а, чтобы заказчики либо сами, либо силами отдела поддержки устранили проблему;
3) если blocker, critical или major баг обнаружен в текущей разрабатываемой версии (версия находящаяся у разработчиков и тестеров), то их приоритет устанавливается ниже разработки новой функциональности (фича всегда приоритетней бага в текущей разрабатываемой версии); исключение: blocker, блокирующий разработку или тестирование (см. пункт 1);
4) пока не исправлены ВСЕ blocker, critical и major баги версия не может быть выпущена (релиз невозможен, пока есть blocker, critical и major баги);
5) все остальные баги планируются с минимальным приоритетом и исправляются по мере возможности и загруженности людей, они могут передвигаться от версии к версии.

Вот собственно и всё.</note-content></text>
  <last-change-date>2008-03-28T22:56:16.1680446+03:00</last-change-date>
  <last-metadata-change-date>2008-03-28T22:56:16.1680446+03:00</last-metadata-change-date>
  <create-date>2008-03-28T22:56:09.2636019+03:00</create-date>
  <cursor-position>48</cursor-position>
  <width>450</width>
  <height>360</height>
  <x>295</x>
  <y>308</y>
  <open-on-startup>False</open-on-startup>
</note>