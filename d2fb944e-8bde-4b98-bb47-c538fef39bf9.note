<?xml version="1.0" encoding="utf-8"?>
<note version="0.3" xmlns:link="http://beatniksoftware.com/tomboy/link" xmlns:size="http://beatniksoftware.com/tomboy/size" xmlns="http://beatniksoftware.com/tomboy">
  <title>Работа IMTS в третьей версии</title>
  <text xml:space="preserve"><note-content version="0.1">Работа IMTS в третьей версии


В первом приближении – механизм этот работает следующим образом: При любом обновлении таблицы складских проводок (<link:internal>inventTrans</link:internal>) система в рамках ОТДЕЛЬНОГО соединения с БД НЕНАДОЛГО открывает транзакцию в ходе которой и обновляется таблица запасов в наличии (inventSum). Поскольку транзакция быстро завершается – продолжительность блокирования также мала. При любом обновлении таблицы складских проводок, также в ОТДЕЛЬНОМ соединении в таблицу inventSumLogTTS пишется протокол обновления складских проводок. Зачем он нужен ? Давайте подумаем – что система должна сделать, если основная транзакция (с обновлениями <link:internal>inventTrans</link:internal>,SalesLine и тп) будет отменена? По логике вещей – должны быть отменены и изменения записей с текущими остатками в таблице запасов в наличии. Однако – поскольку эти изменения были сделаны в отдельном соединении и в отдельной (уже подтвержденной) транзакции, сам <link:internal>MS SQL</link:internal> (или <link:internal>Oracle</link:internal>) этого явно не будет делать. В связи с этим, в DAX 3.0 был реализован механизм, который в момент отката основной транзакции, пробегает по связанным с этой транзакцией записям в inventSumLogTTS, и вычитает количества взятые из этой таблицы из соответствующих записей в inventSum. То есть – поскольку при включении механизма <link:internal>IMTS</link:internal> система ОБХОДИТ стандартный механизм транзакций СУБД, то приходится В РУЧНУЮ, на уровне прикладного кода (в классе InventUpdateTTSControl) откатывать изменения сделанные в обход штатного механизма транзакций. При этом таблица InventSumLogTTS фактически выполняет функции самодельного журнала транзакций, в котором протоколируются изменения записей в ходе основной транзакции.

Не смотря на то, что строго говоря, техническая проблема блокировок в этом механизме была преодолена, проблема НЕОПРЕДЕЛЕННОСТИ уровня запасов до завершения транзакции осталась. Ну например  – если у нас на складе есть 5 штук изделия, еще 8 штук оприходовано в незавершенной транзакции – можем ли мы дать зарезервировать 10 штук ?

При настройке <link:internal>IMTS</link:internal> можно было указать два режима проверки количеств на складе при выполнении операции списания – оптимистический и пессимистический. В оптимистическом режиме, система при оценке уровня складских запасов считала, что все незавершенные транзакции будут завершены. Если включить этот режим, то система РАЗРЕШАЛА зарезервировать 10 штук в нашем примере. Правда – это порождало другую проблему. Если после выполнения резервирования, приходная транзакция была откачена, то мы получали ситуацию, при которой у нас поставлен резерв на отсутствующий в системе товар. Можно было также включить пессимистический режим проверки остатка. В этом режиме, для оценки уровня запасов система вычитала накопившееся в inventSumLogTTS количество по незавершенным транзакциям из текущего значения запасов в наличии из таблицы InventSum. Ситуацию с резервированием приходуемого товара этот режим разрешал. Правда – возникала проблема с выполнением параллельных операций списания товара. Например – один сейл резервирует товар в рамках незавершенной транзакции. Другой сейл также пытается зарезервировать этот товар. Поскольку система считает, что операция первого сейла не завершится (пессимистический режим), то второму сейлу разрешается поставить себе в резерв тот же самый товар. В результате – опять возникла ситуация при которой зарезервировано больше товара чем есть на складе.

Кроме этих идеологических проблем , <link:internal>IMTS</link:internal> также имел и несколько неприятных технических особенностей. Во первых – судя по всему, разработчики <link:internal>IMTS</link:internal> не были до конца уверены что ядро системы сможет во всех случаях выполнить при откате транзакции код, занимающийся ручным откатом изменений в таблице запасов в наличии (inventSum). В результате, был реализован хитрый механизм, который периодически (периодичность определялась настройками параметров <link:internal>IMTS</link:internal>) пробегает по всем записям в inventSumLogTTS, не помеченным как завершенные (isCommited). Далее – этот механизм пытается определить  - активна ли еще та сессия, которая создала эту запись и, если она не активна, этот механизм откатывает соответствующие обновления в таблице inventSum. Причем, механизм этот периодически вызывался при завершении первой попавшейся складской транзакции, в результате чего, время от времени, какая-нибудь безобидная операция типа резервирования одной позиции, почему-то длилась пару минут, поскольку система решила проверить актуальность данных в inventSumLogTTS. Во вторых – настройка режима проверки количеств влияла только на проверку при выполнении списания, но не влияла на кучу отчетов и форм, которые прямолинейно брали количества из таблицы InventSum, работая, таким образом, в оптимистическом режиме. Получалось что в форме “Запасы в наличии” мы видим, что товар у нас на складе есть, а списать мы его не можем, потому что он еще приходуется и включен пессимистический режим оценки запасов.

На своих собственных проектах (на которых я был PM или системным архитектором) я так ни разу и не рискнул включить режим <link:internal>IMTS</link:internal>. Когда я расспрашивал знакомых, отзывы были самыми разнообразными. Кто-то говорил, что все хорошо работает, некоторые говорили что-то типа “иногда барахлит, но жить можно; лучше иногда запасы пересчитывать, чем <link:internal>блокировки</link:internal> терпеть”; кто-то говорил что-то типа “Включили. Попробовали. С ужасом выключили и на всякий случай скрыли форму включения/выключения”. Коротко говоря – в  версии DAX 3, эффект от применения механизма <link:internal>IMTS</link:internal> был неоднозначным. К слову сказать – я видел внедрения в логистических и торговых компаниях на 200-250 пользователей с выключенным режимом <link:internal>IMTS</link:internal>. При этом пользователям, конечно действовало на нервы непредвиденное подтормаживание системы, но в проблемы для всего бизнеса это не превращалось, поскольку, существенного замедления бизнес-процессов в целом это не вызывало.
</note-content></text>
  <last-change-date>2009-10-17T22:10:58.5612780+04:00</last-change-date>
  <last-metadata-change-date>2009-10-17T22:10:58.5612780+04:00</last-metadata-change-date>
  <create-date>2008-03-29T06:25:54.0806880+03:00</create-date>
  <cursor-position>5157</cursor-position>
  <width>506</width>
  <height>360</height>
  <x>4</x>
  <y>637</y>
  <open-on-startup>False</open-on-startup>
</note>